name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  BUN_VERSION: 'latest'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Validate Release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Determine environment
        id: environment
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=production" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          version="${{ steps.version.outputs.version }}"
          if [[ ! $version =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9-]+)?$ ]]; then
            echo "Error: Version $version does not match semantic versioning format"
            exit 1
          fi

      - name: Check if tag exists
        run: |
          version="${{ steps.version.outputs.version }}"
          if git rev-parse "$version" >/dev/null 2>&1; then
            echo "Tag $version already exists"
          else
            echo "Creating new tag $version"
          fi

  # Build and Test
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build ${{ matrix.component }}
        run: |
          cd packages/${{ matrix.component }}
          bun run build

      - name: Run tests
        run: |
          cd packages/${{ matrix.component }}
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            bun run test
          else
            echo "No tests configured for ${{ matrix.component }}"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.component }}-build
          path: packages/${{ matrix.component }}/dist/
          retention-days: 30

  # Build Docker Images
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate, build]
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.component }}-build
          path: packages/${{ matrix.component }}/dist/

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/${{ matrix.component }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker
    permissions:
      security-events: write
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ needs.validate.outputs.version }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.component }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.component }}.sarif'

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: vibecode_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run integration tests
        run: |
          export DATABASE_URL="postgresql://postgres:test_password@postgres:5432/vibecode_test"
          export REDIS_URL="redis://redis:6379"
          bun run test:integration
        env:
          NODE_ENV: test

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, docker, security, integration]
    if: needs.validate.outputs.environment == 'staging' || (needs.validate.outputs.environment == 'production' && !startsWith(needs.validate.outputs.version, 'v0.'))
    environment:
      name: staging
      url: https://staging.vibecode.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to staging
        run: |
          # Update docker-compose with new image tags
          sed -i "s|image: vibe-code-backend:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ needs.validate.outputs.version }}|g" docker-compose.staging.yml
          sed -i "s|image: vibe-code-frontend:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.validate.outputs.version }}|g" docker-compose.staging.yml

          # Deploy to staging environment
          ./scripts/deploy.sh staging docker-compose.staging.yml .env.staging

      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 60

          # Run basic health checks
          curl -f https://staging.vibecode.com/health
          curl -f https://staging.vibecode.com/api/health

      - name: Run E2E tests
        run: |
          export BASE_URL=https://staging.vibecode.com
          bun run test:e2e:staging

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, docker, security, integration, deploy-staging]
    if: needs.validate.outputs.environment == 'production' && (success() || needs.validate.outputs.environment == 'production')
    environment:
      name: production
      url: https://vibecode.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create production backup
        run: |
          # Trigger backup before deployment
          aws ecs run-task \
            --cluster vibe-code-prod \
            --task-definition backup-task \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-xxx],securityGroups=[sg-xxx],assignPublicIp=ENABLED}"

      - name: Deploy to production
        run: |
          # Update docker-compose with new image tags
          sed -i "s|image: vibe-code-backend:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ needs.validate.outputs.version }}|g" docker-compose.prod.yml
          sed -i "s|image: vibe-code-frontend:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.validate.outputs.version }}|g" docker-compose.prod.yml

          # Rolling deployment to production
          ./scripts/deploy.sh production docker-compose.prod.yml .env.production

      - name: Run production smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 120

          # Run comprehensive health checks
          curl -f https://vibecode.com/health
          curl -f https://vibecode.com/api/health

          # Check critical functionality
          curl -f https://vibecode.com/api/adapters
          curl -f https://vibecode.com/api/validation/stats

      - name: Monitor deployment
        run: |
          # Monitor deployment for 10 minutes
          for i in {1..20}; do
            if curl -f -s https://vibecode.com/health > /dev/null; then
              echo "Health check $i/20 passed"
            else
              echo "Health check $i/20 failed"
              exit 1
            fi
            sleep 30
          done

  # Post-deployment
  post-deploy:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [validate, deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    steps:
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          release_name: Release ${{ needs.validate.outputs.version }}
          body: |
            ## Changes in ${{ needs.validate.outputs.version }}

            ### 🚀 Features
            <!-- Add new features here -->

            ### 🐛 Bug Fixes
            <!-- Add bug fixes here -->

            ### 🔒 Security
            <!-- Add security updates here -->

            ### 📚 Documentation
            <!-- Add documentation updates here -->

            ## Docker Images
            - Backend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ needs.validate.outputs.version }}`
            - Frontend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.validate.outputs.version }}`

            ## Deployment
            - Staging: https://staging.vibecode.com
            - Production: https://vibecode.com
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') }}

      - name: Update documentation
        run: |
          # Auto-update version in documentation
          echo "Updating documentation for version ${{ needs.validate.outputs.version }}"

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            🚀 *Deployment Successful*
            Version: `${{ needs.validate.outputs.version }}`
            Environment: `${{ needs.validate.outputs.environment }}`
            Production URL: https://vibecode.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback on Failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [validate, deploy-production]
    if: failure() && needs.deploy-production.result == 'failure'
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Rollback deployment
        run: |
          echo "Rolling back failed deployment..."
          ./scripts/deploy.sh rollback

      - name: Notify team of rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          channel: '#deployments'
          text: |
            ⚠️ *Deployment Failed - Rollback Executed*
            Version: `${{ needs.validate.outputs.version }}`
            Environment: `${{ needs.validate.outputs.environment }}`
            Please check the deployment logs for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
