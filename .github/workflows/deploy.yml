name: Production Deployment

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Backend Image
      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      # Frontend Image
      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  # Security Scanning of Images
  security-scan:
    name: Security Scan Images
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-images.outputs.backend-image }}
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

      - name: Upload Trivy scan results for backend
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-backend-results.sarif'

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-images.outputs.frontend-image }}
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'

      - name: Upload Trivy scan results for frontend
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-frontend-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl for staging
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          # Update deployment images
          kubectl set image deployment/vibe-code-backend backend=${{ needs.build-images.outputs.backend-image }}
          kubectl set image deployment/vibe-code-frontend frontend=${{ needs.build-images.outputs.frontend-image }}
          
          # Wait for rollout
          kubectl rollout status deployment/vibe-code-backend --timeout=300s
          kubectl rollout status deployment/vibe-code-frontend --timeout=300s

      - name: Run health checks
        run: |
          # Wait for pods to be ready
          sleep 30
          
          # Check backend health
          kubectl get pods -l app=vibe-code-backend
          kubectl logs -l app=vibe-code-backend --tail=50
          
          # Check frontend health
          kubectl get pods -l app=vibe-code-frontend
          kubectl logs -l app=vibe-code-frontend --tail=50

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl for production
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Create deployment backup
        run: |
          # Backup current deployment state
          kubectl get deployment vibe-code-backend -o yaml > backup-backend-deployment.yaml
          kubectl get deployment vibe-code-frontend -o yaml > backup-frontend-deployment.yaml

      - name: Deploy to production with rolling update
        run: |
          # Update deployment images with rolling update strategy
          kubectl set image deployment/vibe-code-backend backend=${{ needs.build-images.outputs.backend-image }}
          kubectl set image deployment/vibe-code-frontend frontend=${{ needs.build-images.outputs.frontend-image }}
          
          # Wait for rollout with timeout
          kubectl rollout status deployment/vibe-code-backend --timeout=600s
          kubectl rollout status deployment/vibe-code-frontend --timeout=600s

      - name: Run comprehensive health checks
        run: |
          # Wait for stabilization
          sleep 60
          
          # Check all pods are running
          kubectl get pods -l app=vibe-code-backend
          kubectl get pods -l app=vibe-code-frontend
          
          # Check service endpoints
          kubectl get services
          
          # Verify application health
          BACKEND_POD=$(kubectl get pods -l app=vibe-code-backend -o jsonpath="{.items[0].metadata.name}")
          kubectl exec $BACKEND_POD -- curl -f http://localhost:3000/health || exit 1
          
          echo "✅ Production deployment successful!"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "❌ Deployment failed, rolling back..."
          kubectl rollout undo deployment/vibe-code-backend
          kubectl rollout undo deployment/vibe-code-frontend
          kubectl rollout status deployment/vibe-code-backend --timeout=300s
          kubectl rollout status deployment/vibe-code-frontend --timeout=300s

  # Database Migration
  migrate-database:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run database migrations
        run: |
          # Run any pending database migrations
          cd packages/backend
          bun run migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NODE_ENV: production

      - name: Verify database integrity
        run: |
          # Run database integrity checks
          cd packages/backend
          bun run db:check
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Post-deployment verification
  post-deploy-verification:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && (github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))
    steps:
      - name: Run smoke tests
        run: |
          # Wait for deployment to stabilize
          sleep 120
          
          # Test critical endpoints
          curl -f https://api.vibecode.dev/health || exit 1
          curl -f https://api.vibecode.dev/api/adapters || exit 1
          curl -f https://vibecode.dev || exit 1
          
          echo "✅ Smoke tests passed!"

      - name: Run performance baseline tests
        run: |
          # Install artillery for performance testing
          npm install -g artillery
          
          # Run baseline performance test
          cat > performance-test.yml << EOF
          config:
            target: 'https://api.vibecode.dev'
            phases:
              - duration: 60
                arrivalRate: 2
          scenarios:
            - name: "Production health check"
              flow:
                - get:
                    url: "/health"
                - think: 2
                - get:
                    url: "/api/adapters"
          EOF
          
          artillery run performance-test.yml
        continue-on-error: true

      - name: Update deployment status
        run: |
          echo "🚀 Production deployment completed successfully!"
          echo "Backend Image: ${{ needs.build-images.outputs.backend-image }}"
          echo "Frontend Image: ${{ needs.build-images.outputs.frontend-image }}"
          echo "Deployment Time: $(date)"

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deploy-verification]
    if: always()
    steps:
      - name: Clean up old images
        run: |
          # This would typically connect to your registry and clean up old images
          echo "Cleaning up old container images..."
          
      - name: Archive deployment logs
        run: |
          echo "Archiving deployment logs and artifacts..."

  # Notifications
  notify-deployment:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deploy-verification]
    if: always()
    steps:
      - name: Notify team on success
        if: ${{ needs.deploy-production.result == 'success' && needs.post-deploy-verification.result == 'success' }}
        run: |
          echo "🎉 Vibe Code has been successfully deployed to production!"
          echo "Version: ${{ github.event.release.tag_name || github.event.inputs.version }}"
          echo "Deployment completed at: $(date)"

      - name: Notify team on failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "🚨 Production deployment failed!"
          echo "Please check the logs and take immediate action."
          echo "Failed jobs:"
          echo "- Deploy Production: ${{ needs.deploy-production.result }}"
          echo "- Post-deploy Verification: ${{ needs.post-deploy-verification.result }}"