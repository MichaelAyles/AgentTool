version: '3.8'

services:
  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: vibe-code-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vibe-code-network

  # PostgreSQL database (optional - for production)
  postgres:
    image: postgres:15-alpine
    container_name: vibe-code-postgres
    environment:
      POSTGRES_DB: vibecode
      POSTGRES_USER: vibecode
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U vibecode -d vibecode']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vibe-code-network

  # Backend service
  backend:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
    container_name: vibe-code-backend
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      REDIS_URL: redis://redis:6379
      DATABASE_URL: ${DATABASE_URL:-sqlite:./database.db}
      POSTGRES_URL: postgresql://vibecode:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/vibecode
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_change_in_production}
      SESSION_SECRET: ${SESSION_SECRET:-dev_session_secret_change_in_production}
      # Claude Code configuration
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      # Google AI configuration
      GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY}
      # Security configuration
      DANGEROUS_MODE_ENABLED: ${DANGEROUS_MODE_ENABLED:-false}
      AUDIT_LOG_LEVEL: ${AUDIT_LOG_LEVEL:-info}
    volumes:
      # Mount for development (comment out for production)
      - ./packages/backend/dist:/app/packages/backend/dist
      - ./adapters:/app/adapters
      - backend_logs:/app/logs
      - backend_config:/app/.config
      - backend_tmp:/app/.tmp
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - vibe-code-network
    restart: unless-stopped

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    container_name: vibe-code-frontend
    ports:
      - '80:80'
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - vibe-code-network
    restart: unless-stopped

  # Nginx reverse proxy (optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: vibe-code-nginx
    ports:
      - '8080:80'
      - '8443:443'
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - vibe-code-network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring and logging
  prometheus:
    image: prom/prometheus:latest
    container_name: vibe-code-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - vibe-code-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: vibe-code-grafana
    ports:
      - '3001:3000'
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - vibe-code-network
    profiles:
      - monitoring

  # Log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: vibe-code-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ports:
      - '9200:9200'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - vibe-code-network
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: vibe-code-logstash
    ports:
      - '5044:5044'
      - '9600:9600'
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./docker/logstash/config:/usr/share/logstash/config:ro
    depends_on:
      - elasticsearch
    networks:
      - vibe-code-network
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: vibe-code-kibana
    ports:
      - '5601:5601'
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - vibe-code-network
    profiles:
      - logging

volumes:
  redis_data:
  postgres_data:
  backend_logs:
  backend_config:
  backend_tmp:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  vibe-code-network:
    driver: bridge
