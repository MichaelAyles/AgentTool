version: '3.8'

services:
  # Staging Redis
  redis:
    image: redis:7-alpine
    container_name: vibe-code-redis-staging
    ports:
      - '6379:6379'
    volumes:
      - redis_data_staging:/data
    command: redis-server --appendonly yes
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vibe-code-network
    restart: unless-stopped

  # Staging PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: vibe-code-postgres-staging
    environment:
      POSTGRES_DB: vibecode_staging
      POSTGRES_USER: vibecode
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-staging_password}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U vibecode -d vibecode_staging']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vibe-code-network
    restart: unless-stopped

  # Staging Backend
  backend:
    image: vibe-code-backend:latest
    container_name: vibe-code-backend-staging
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: staging
      PORT: 3000
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://vibecode:${POSTGRES_PASSWORD:-staging_password}@postgres:5432/vibecode_staging
      JWT_SECRET: ${JWT_SECRET:-staging_jwt_secret}
      SESSION_SECRET: ${SESSION_SECRET:-staging_session_secret}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY}
      DANGEROUS_MODE_ENABLED: true
      AUDIT_LOG_LEVEL: debug
      METRICS_ENABLED: true
      HEALTH_CHECK_ENABLED: true
    volumes:
      - backend_logs_staging:/app/logs
      - backend_config_staging:/app/.config
      - backend_tmp_staging:/app/.tmp
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - vibe-code-network
    restart: unless-stopped

  # Staging Frontend
  frontend:
    image: vibe-code-frontend:latest
    container_name: vibe-code-frontend-staging
    ports:
      - '80:80'
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - vibe-code-network
    restart: unless-stopped

  # Staging Nginx (optional)
  nginx:
    image: nginx:alpine
    container_name: vibe-code-nginx-staging
    ports:
      - '8080:80'
    volumes:
      - ./docker/nginx/nginx.staging.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - vibe-code-network
    restart: unless-stopped

  # Monitoring for staging
  prometheus:
    image: prom/prometheus:latest
    container_name: vibe-code-prometheus-staging
    ports:
      - '9090:9090'
    volumes:
      - ./docker/prometheus/prometheus.staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_staging:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=168h'
      - '--web.enable-lifecycle'
    networks:
      - vibe-code-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: vibe-code-grafana-staging
    ports:
      - '3001:3000'
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-staging_admin}
      GF_SECURITY_ADMIN_USER: admin
      GF_USERS_ALLOW_SIGN_UP: true
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
    volumes:
      - grafana_data_staging:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - vibe-code-network
    restart: unless-stopped

volumes:
  redis_data_staging:
  postgres_data_staging:
  backend_logs_staging:
  backend_config_staging:
  backend_tmp_staging:
  prometheus_data_staging:
  grafana_data_staging:

networks:
  vibe-code-network:
    driver: bridge